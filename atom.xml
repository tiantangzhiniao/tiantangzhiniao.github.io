<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Leo's blog]]></title>
  <subtitle><![CDATA[活到老，学到老：Never too old to learn]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-05-19T11:27:15.329Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Yu Le]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[即时通讯——Openfire + Spark]]></title>
    <link href="http://yoursite.com/2015/05/19/IM/"/>
    <id>http://yoursite.com/2015/05/19/IM/</id>
    <published>2015-05-19T11:18:35.000Z</published>
    <updated>2015-05-19T11:27:15.329Z</updated>
    <content type="html"><![CDATA[<p>即时通讯( Instant Messaging，IM)通常被叫做IM，是两个人通过网络实时地进行同步交流的软件，也是目前国内外互联网用户使用率最高的网络软件。而我毕业设计就是和IM相关的，今天和大家分享一下openfire和spark这2个IM系统的基础软件。<br>Openfire 是遵从GPL 协议的开源软件，是用Java开发的实时协作服务器。它采用了开源的 XMPP 协议来开发即时通讯服务器。由于是采用开放的 XMPP 协议，可以使用各种支持 XMPP 协议的 IM 客户端软件登录服务。可以使用它轻易地构建高效率的即时通讯服务器。Openfire 安装和使用都非常简单，并利用Web进行管理，单台服务器可支持上万并发用户。<br>Spark 是一个开源的、跨平台的即时通讯客户端软件，可以应用在各种商业和组织机构中。它内建了群组聊天、电话集成，又有很强的安全性。它还给终端用户提供了一些人性化的服务，比如拼写检查、群组聊天室的书签标注和选项卡式的对话窗口。配合开源的Openfire，Spark 非常容易部署和使用。</p>
<ol>
<li>Openfire 的安装与配置<br>装 Openfire 之前，先安装 Java 的 JRE 环境，也可以下载包含 JRE 的 Openfire 文件。从网站<a href="http://www.igniterealtime.org/downloads/index.jsp" target="_blank" rel="external">http://www.igniterealtime.org/downloads/index.jsp</a>下载最新版本的Openfire。下载的文件是个可执行文件，双击安装，第一步选择简体中文，其他按照默认设置一步步安装即可。最后一步选择执行 Openfire，界面如图：<br><img src="/picture/qidong.jpg" alt=""><br>Openfire 支持完全的 Web配置。直接点击界面中的LaunchAdmin即可开始通讯服务器的配置。登入管理界面即开始配置向导。语言选择为简体中文;服务器设置保持默认即可; 数据库设置里面有两个选择，标准数据库连接和嵌入的数据库。笔者选择标准数据库连接，因为本文要用 MySQL数据库，这里填入服务器的IP或者域名、选择建好的数据库名、数据库的用户名和密码，这样就可以用MySQL作为数据库服务器;特性设置里面保持默认即可; 管理员账户为admin，只要填入电子邮箱和设置密码即可;最后一步是安装完成。这样就可以登录到管理控制台。在这个控制台里可以对服务器、用户、分组、插件等功能做设置。管理控制台的界面如图<br><img src="/picture/openfire.png" alt=""></li>
<li>Spark 的安装与配置<br>从<a href="http://www.igniterealtime.org/downloads/index.jsp" target="_blank" rel="external">http://www.igniterealtime.org/downloads/index.jsp</a>下载 Spark 的最新版本，选择 Windows 版本。Spark的安装过程比较简单，登录的时候服务器地址选择安装Openfire时设置的IP或域名即可。Spark 是个IM 客户端，具备了几乎一切即时通讯工具的功能。利用Spark菜单的Plugin 功能，可以得到很多实用插件，比如拼写检查、即时翻译等功能。Spark最吸引人的一个功能就是可以整合很多第三方 IM 账户，可以让用户和 MSN、Yahoo、ICQ、GTalk等 IM 用户互相通信，这个特性解决了各种 IM 之间交互通信的问题。整合国内的 QQ、人人网 IM 等还在测试阶段，不能正式使用，因为QQ等是采用封闭协议的，还有待进一步完善。<br>Openfire 即时通讯服务器所需要的几乎所有的插件都可以从<a href="http://www.igniterealtime.org/projects/openfire/plugins.jsp" target="_blank" rel="external">http://www.igniterealtime.org/projects/openfire/plugins.jsp</a>下载,大家可以根据自己需要从上面下载相应的插件，然后把文件复制到Openfire/Plugins文件夹下或者从Openfire控制台插件标签里直接上传部署，重启Openfire 服务即可。<br>Openfire + Spark 是跨平台的，支持多版本操作系统。这个也是我自己的毕业设计涉及的内容，感觉他的功能很强大，而且是开源的，可以根据自己的需要设计自己及时通讯系统。所以分享给大家。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>即时通讯( Instant Messaging，IM)通常被叫做IM，是两个人通过网络实时地进行同步交流的软件，也是目前国内外互联网用户使用率最高的网络软件。而我毕业设计就是和IM相关的，今天和大家分享一下openfire和spark这2个IM系统的基础软件。<br>Ope]]>
    </summary>
    
      <category term="IM" scheme="http://yoursite.com/tags/IM/"/>
    
      <category term="IM" scheme="http://yoursite.com/categories/IM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android之事件和intent]]></title>
    <link href="http://yoursite.com/2015/05/15/shijian/"/>
    <id>http://yoursite.com/2015/05/15/shijian/</id>
    <published>2015-05-15T09:20:11.000Z</published>
    <updated>2015-05-15T09:24:00.317Z</updated>
    <content type="html"><![CDATA[<p>在Android中与界面编程息息相关的就是事件处理了，当用户在程序界面上执行各种操作时，应用程序必须为用户动作提供响应动作。Android提供了两种方式的事件处理：基于监听的事件处理和基于回调的事件处理<br>基于监听的事件处理模型编程步骤：</p>
<ul>
<li>获取界面组件（事件源），即被监听的对象，任何组件都可以。</li>
<li>实现监听器类，即一个特殊的Java类，必须实现XxxListener接口，事件编程的关键。</li>
<li>调用事件源的setXxxListener方法将事件监听器对象注册给组件（事件源），一般调用setXxxListener（XxxListener）方法即可。</li>
</ul>
<p>而基于回调的事件处理，关于回调机制我在上一篇微博中已经讲了，简单的说就是在组件的属性中直接定义事件，这也是现在Android经常用到的。</p>
<ol>
<li>Handle、Looper与MessageQueue之间的关系及工作原理<br>Android中不允许在子线程中更新界面组件，要在子线程中更新界面组件，需要用Handle对象实现。因为要让handle正常工作，当前线程中必须有一个Looper对象，所以使用handle步骤是：调用Looper的prepare()方法为当前线程创建Looper对象，创建Looper对象时，它的构造器会创建与之配套的MessageQueue；然后创建handle子类的实例，重写handleMessage()方法，该方法负责处理来自其他线程的消息。最后调用Looper的Loop()方法启动Looper。<br>在Android中UI线程主要负责处理用户的按键事件、用户触屏事件及屏幕绘图事件等，因此其他操作不能阻塞UI线程，否则UI界面会停止响应—这样用户感觉会非常糟糕，所以一定牢记：千万不要在UI线程中执行一些耗时的操作</li>
<li>Intent简介<br>Intent通过指定action属性（其实就是一个普通的字符串），实现把该intent与具体的activity分离，从而提供高层次的解耦（低耦合）。当Android应用不管是启动activity，还是启动service、BroadcastReceiver组件时，Android系统都是由intent来实现的。简单的说，Android使用intent封装了应用程序的“启动意图”，这种“意图”并未直接与任何程序组件耦合。而intent的属性都是通过在 <intent-filter...>属性进行配置的。</intent-filter...></li>
</ol>
<p>最后和大家分享一个比较酷炫的东西和一个小技术，在朋友圈里，经常见到一些html5海报，浏览者通过手指的滑动实现页面的切换效果，由于该效果和ppt演示十分相似，也有人称之为html5PPT。而制作这个大家可以看看这个<a href="http://chuansong.me/n/674095" target="_blank" rel="external">http://chuansong.me/n/674095</a>，做出来的效果真是棒棒哒。<br>如何将MySQL中的数据导出为xls格式的：<br>select *from 数据库.表名（world.question_attribute_value） into outfile ‘d:test.xls’;<br>这个时候xls文件是utf-8编码的，用excel打开，会出现乱码。把test.xls以文本方式打开，然后另存为，在编码选择ANSI编码，保存。ok，再用excel打开，乱码问题，烟消云散。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Android中与界面编程息息相关的就是事件处理了，当用户在程序界面上执行各种操作时，应用程序必须为用户动作提供响应动作。Android提供了两种方式的事件处理：基于监听的事件处理和基于回调的事件处理<br>基于监听的事件处理模型编程步骤：</p>
<ul>
<li>获取]]>
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解activity]]></title>
    <link href="http://yoursite.com/2015/05/12/activity/"/>
    <id>http://yoursite.com/2015/05/12/activity/</id>
    <published>2015-05-12T08:40:06.000Z</published>
    <updated>2015-05-12T08:54:11.235Z</updated>
    <content type="html"><![CDATA[<p>activity是Android应用的重要的组成单元之一（另外三个是service、broadcastreceive和contentprovider），也是Android应用最常见的组件之一，而对它的生命周期的深刻了解对于Android开发十分重要。<br>首先得说一下Android的回调机制：当开发者需要该组件能响应特定的事件，可以选择性地实现该组件的特定方法，即当用户在该组件上激发某个事件时，该组件上特定的方法就会回调（通俗的讲就是实现某个功能就会调用给功能对应的方法叫回调）。Activity运行过程中所处的不同状态称为生命周期，在不同的状态会回调不同的方法。<br>每个活动在其生命周期中最多可能会有四种状态。</p>
<ol>
<li>运行状态<br>当一个活动位于返回栈的栈顶时，这时活动就处于运行状态。系统最不愿意回收的就是处于运行状态的活动，因为这会带来非常差的用户体验。</li>
<li>暂停状态<br>当一个活动不再处于栈顶位置，但仍然可见时，这时活动就进入了暂停状态。你可能会觉得既然活动已经不在栈顶了，还怎么会可见呢？这是因为并不是每一个活动都会占满整个屏幕的，比如对话框形式的活动只会占用屏幕中间的部分区域。处于暂停状态的活动仍然是完全存活着的，系统也不愿意去回收这种活动（因为它还是可见的，回收可见的东西都会在用户体验方面有不好的影响），只有在内存极低的情况下，系统才会去考虑回收这种活动。</li>
<li>停止状态<br>当一个活动不再处于栈顶位置，并且完全不可见的时候，就进入了停止状态。系统仍然会为这种活动保存相应的状态和成员变量，但是这并不是完全可靠的，当其他地方需要内存时，处于停止状态的活动有可能会被系统回收。</li>
<li>销毁状态<br>当一个活动从返回栈中移除后就变成了销毁状态。系统会最倾向于回收处于这种状态的活动，从而保证手机的内存充足。</li>
</ol>
<p>Activity 类中定义了七个回调方法，覆盖了活动生命周期的每一个环节，下面我来一一<br>介绍下这七个方法</p>
<ol>
<li>onCreate()<br>这个方法你已经看到过很多次了，每个活动中我们都重写了这个方法，它会在活动第一次被创建的时候调用。你应该在这个方法中完成活动的初始化操作，比如说加载布局、绑定事件等。</li>
<li>onStart()<br>这个方法在活动由不可见变为可见的时候调用。</li>
<li>onResume()<br>这个方法在活动准备好和用户进行交互的时候调用。此时的活动一定位于返回栈的栈顶，并且处于运行状态。</li>
<li>onPause()<br>这个方法在系统准备去启动或者恢复另一个活动的时候调用。我们通常会在这个方法中将一些消耗 CPU 的资源释放掉，以及保存一些关键数据，但这个方法的执行速度一定要快，不然会影响到新的栈顶活动的使用。</li>
<li>onStop()<br>这个方法在活动完全不可见的时候调用。它和onPause()方法的主要区别在于，如果启动的新活动是一个对话框式的活动，那么onPause()方法会得到执行，而onStop()方法并不会执行。</li>
<li>onDestroy()<br>这个方法在活动被销毁之前调用，之后活动的状态将变为销毁状态。</li>
<li>onRestart()<br>这个方法在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。下面的图可以帮你很好的了解该调用过程：<br><img src="/picture/zhouqi.png" alt=""></li>
</ol>
<p>以上七个方法中除了 onRestart()方法，其他都是两两相对的，从而又可以将活动分为三种生存期。</p>
<ol>
<li>完整生存期<br>活动在 onCreate()方法和onDestroy()方法之间所经历的，就是完整生存期。一般情况下，一个活动会在 onCreate()方法中完成各种初始化操作，而在onDestroy()方法中完成释放内存的操作。</li>
<li>可见生存期<br>活动在 onStart()方法和onStop()方法之间所经历的，就是可见生存期。在可见生存期内，活动对于用户总是可见的，即便有可能无法和用户进行交互。我们可以通过这两个方法，合理地管理那些对用户可见的资源。比如在onStart()方法中对资源进行加载，而在onStop()方法中对资源进行释放， 从而保证处于停止状态的活动不会占用过多内存。</li>
<li>前台生存期<br>活动在 onResume()方法和onPause()方法之间所经历的，就是前台生存期。在前台生存期内，活动总是处于运行状态的，此时的活动是可以和用户进行相互的，我们平时看到和接触最多的也这个状态下的活动。<br>Android中的活动是可以层叠的，以栈来管理活动，没启动一个新活动就会覆盖在原活动之上，点击back会销毁最上面的活动，下面展示了如何管理活动操作的。<br><img src="/picture/zhan.png" alt=""><br>而不同的活动之间是通过bundle对象来通信传递数据的。</li>
</ol>
<p>最后所谓温故知新，我将servlet与activity比较一下：</p>
<ol>
<li>activity是Android的窗口容器，因此activity最终以窗口形式显示出来，而servlet并不会生成应用界面，只向浏览器生成文本响应。</li>
<li>activity的本质是通过各种界面组件来搭建界面；而servlet则主要以IO流向浏览者生成文本响应，用户看到的界面其实是浏览器负责生成的。</li>
<li>activity之间的跳转主要通过intent对象来控制；而servlet之间跳转则主要由用户请求来控制。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>activity是Android应用的重要的组成单元之一（另外三个是service、broadcastreceive和contentprovider），也是Android应用最常见的组件之一，而对它的生命周期的深刻了解对于Android开发十分重要。<br>首先得说一下An]]>
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android入门]]></title>
    <link href="http://yoursite.com/2015/05/08/rumen/"/>
    <id>http://yoursite.com/2015/05/08/rumen/</id>
    <published>2015-05-08T07:12:59.000Z</published>
    <updated>2015-05-08T07:46:15.239Z</updated>
    <content type="html"><![CDATA[<p>时间好快，转眼来南瑞实习已经两个多月了，过上了每天上班的生活，偶尔有时会加班，但是每天的生活觉得还是很充实的，虽然平淡，但是每天都能有所收获即使只是那么一点点。为了讲述Android的完整性，我把上次在新浪写的弄过来，这也是受到一些大牛的启发，我要坚持写下去，记录下我学习过程中的收获，遇到的问题包括编程过程中遇到的错误，调试的过程等，以及一些感悟，希望通过这样总结平时的学习，记录下学习生活中的点点滴滴。<br>今天就讲讲Android的入门吧。</p>
<ul>
<li>首先就是搭建开发环境，这个任何一本书都有介绍，去Android官网下一个SDK工具包，地址：<a href="http://developer.android.com/sdk/" target="_blank" rel="external">http://developer.android.com/sdk/</a>。然后安装一下，还要配置一下JDK，很简单就不多赘述。说一下我主要参考的书就是《疯狂Android讲义》，也可以参考《第一行代码》，其实最主要的还是要会运用Android的API文档，其实学习任何技术都是一样的，一定要学会查文档，因为有好多方法和属性是根本记不住的，所以我学习的时候，把每个方法都浏览一遍（一般Android的方法根据名称就能知道它的用途），然后编程的时候根据需求用到的时候去查API文档或者参考书寻找对应的方法和属性，或者百度。其实编程编多了好像也就是那么回事，最近网上不是流传着编程的步骤：<blockquote>
<p>1)    打开Google。<br>2)    输入stackoverflow，进行搜索。<br>3)    进入网站，搜索需求的代码，copy到本地进行调试，改错等。<br>4)    调试不成功，接着重复2到4步骤，重新搜索。<br>5)    有没有搜不到的情况，答：不可能。</p>
</blockquote>
</li>
</ul>
<p>虽然是个段子，但是stackoverflow确实很强大，你有什么错误可以在上面找。<br>环境搭好后，需要你建一个虚拟机（就是一个虚拟手机，可以在上面运行你的程序），也很简单，可以参考书上说明或者百度。建好后运行虚拟机就跟真的手机一样<br><img src="/picture/jiemian.jpg" alt=""></p>
<ul>
<li>建立项目<br>一般所有的书上都会介绍建立helloworld这个第一个Android项目，这里根据书上的介绍一步一步建立就好了，我想分享一下Android的项目结构，其实它也是典型的MVC结构，类似于JavaWeb运用SSH的结构，目的为了降低耦合性。<br><img src="/picture/ziyuan.jpg" alt=""><br>这就是一个项目中的所有文件，src中放的是Java代码，就是后台控制的内容。Gen目录下的文件是自动生成的，你不用去管它也不要去修改它。Assets和bin不需要关注。Libs下放的是第三方jar包。Res是比较重要的，内容有比较多，前面的gen目录下的R.java也是根据这个目录下的文件自动生成的。以我的理解，大家把图片都放在图片放在 drawable-hdpi 目录下，布局放在 layout 目录下，字符串和其他的XML布局放在 values 目录下。AndroidManifest.xml也是经常用到的文件，涉及到的内容我也没学到呢，等学到了再说吧。project.properties这个文件非常地简单，就是通过一行代码指定了编译程序时所使用的 SDK 版本。<br>还有就是在编程的过程中一定要学会用自动提示功能，这样能避免很多错误，因为根据自动提示会自动把一些用到的包导进去和大小写问题也会自动解决。<br>最后分享一些网址：<br>这个是卡耐基梅隆大学计算机学院语言技术系的资源大全：包括大量的NLP开源软件工具包，基础数据集，论文集，数据挖掘教程，机器学习资源：<a href="http://islpc21.is.cs.cmu.edu:3000/lti_catalogue。" target="_blank" rel="external">http://islpc21.is.cs.cmu.edu:3000/lti_catalogue。</a><br>由于在国企，Google等外国网站很困难（国企对于信息安全要求太严格了），导致上Google搜索问题出现困难，就用了google 镜像网站：repigu.com或者nan.so</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间好快，转眼来南瑞实习已经两个多月了，过上了每天上班的生活，偶尔有时会加班，但是每天的生活觉得还是很充实的，虽然平淡，但是每天都能有所收获即使只是那么一点点。为了讲述Android的完整性，我把上次在新浪写的弄过来，这也是受到一些大牛的启发，我要坚持写下去，记录下我学习过]]>
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[My first blog]]></title>
    <link href="http://yoursite.com/2015/05/07/my_first_blog/"/>
    <id>http://yoursite.com/2015/05/07/my_first_blog/</id>
    <published>2015-05-07T14:16:33.000Z</published>
    <updated>2015-05-08T07:50:39.251Z</updated>
    <content type="html"><![CDATA[<p>之前由于在新浪上开始写博客，写博客是因为之前经常看到一些大牛的博客，让我受益匪浅，就跟读文学类的书籍一样，带领你走进另一个你未曾经历过的世界，也许这就是我为什么现在特别喜欢看小说的原因吧，而且当你学会分享和教别人的时候，说明你已经差不多掌握了这个技术。后来经过Gavin 的建议让我用github来搭博客，主要是自己的博客，没有任何广告，看的也很舒服。经过努力，今天终于把博客建好了。今天就用我的在github上的第一篇博客来记录一下我的建博客的经历和遇到的问题的解决方案（更为详细的步骤大家还是参考原文吧<a href="http://linjiangxian998.com/" target="_blank" rel="external">linjiangxian</a>和<a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">zipperary</a>），以及我最近学习的情况，还有强烈推荐大家学习一下Markdown语言，棒棒哒的<strong>优点</strong>：</p>
<ul>
<li>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</li>
<li>让你专注于文字而不是排版。</li>
<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</li>
<li>Markdown 的标记语法有极好的可读性<br>建博客的的步骤分为：</li>
</ul>
<ol>
<li>在<a href="https://github.com/" target="_blank" rel="external">github</a>在注册一个账号，然后创建一个repository。（github是世界上最大的代码托管网站。我的理解是和网盘差不多，只不过上面存放的都是代码。国内有类似的常用的网站是gitcafe）。</li>
<li>安装Node.js（hexo是一款基于Node.js的博客框架，所以要先安装Node.js环境），安装完之后请重启电脑一次。</li>
<li>安装mygit，我们将在这个软件输入一些命令进行操作（安装完成后，在空白处右击鼠标选择Git Bash蹦出一个类似命令行窗口的东西，就说明Git安装成功）</li>
<li>创建hexo文件夹，在你喜爱的文件夹下（如E:\hexo），在E:\hexo（你自己的文件可能跟我不一样）内点击鼠标右键，选择Git bash，执行以下指令。Hexo会自动在目标文件夹建立网站所需要的所有文件:<br><pre><code>hexo init </code></pre><br><strong>安装依赖包</strong><br><pre><code>npm install </code></pre><br><strong>执行以下命令(如E:\hexo)</strong><br><pre><code>1 hexo g<br>2 hexo s<br></code></pre><br>g即是generate，可以写整个单词generate，也可以只写g。s也是同理，即是server。以上两步就建起了本地博客，按照提示可以在浏览器中输入<a href="http://localhost:4000查看" target="_blank" rel="external">http://localhost:4000查看</a></li>
<li>部署博客到github上，用文本编辑器打开_config.yml(如E:\hexo下)。你在部署时，要把下面的tiantangzhiniao都换成你的账号名<br><pre><code>deploy:<br>type: git<br>repo: <a href="https://github.com/tiantangzhiniao/tiantangzhiniao.github.io.git" target="_blank" rel="external">https://github.com/tiantangzhiniao/tiantangzhiniao.github.io.git</a><br>branch: master<br></code></pre><br>然后hexo g和hexo d，接着输入账号和密码即可完成部署</li>
<li>优化主题和插件（可以看<a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">zipperary</a>，写的很详细）</li>
</ol>
<p>这里我主要说一下我在搭建过程的遇到的问题</p>
<ol>
<li>首先每次改_config.yml中的属性时都要加一个空格（就因为这个错误，我在部署的时候一直报错，导致我检查中英文标点和大小写弄了半天），而且在用Markdown标签时也不要忘了加一个空格。</li>
<li>初次搭建时确实可能遇到各种问题，也可能感觉很困难，但是当你搭建成功后会发现原来也很简单嘛。</li>
<li>优化和美观确实比较繁琐，大家可以用一些现成的主题就方便多了，一般的插件都是在widgets下配的。</li>
<li>出现乱码的，不要使用 windows 中的「记事本」打开并编辑文件，推荐使用 sublime text，很简单。如果已经在「记事本」中编辑过，需要使用 sublime text 转码为「utf8」。<br>我讲的很粗略，大家可以去我推荐那个看看，最近我会把我又学习的Android的东西分享一下，学习Android的过程中也逐渐明白了智能手机的一些原理，感觉很好玩！<br>最后非常感谢Gavin 和linjiangxian让我最后顺利的搭建成功。今晚和师父聊了一个多小时，终于把论文题目定下来，真的好感谢师父（虽然他看不到），让我知道了好多，还了解了南瑞的一些情况。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前由于在新浪上开始写博客，写博客是因为之前经常看到一些大牛的博客，让我受益匪浅，就跟读文学类的书籍一样，带领你走进另一个你未曾经历过的世界，也许这就是我为什么现在特别喜欢看小说的原因吧，而且当你学会分享和教别人的时候，说明你已经差不多掌握了这个技术。后来经过Gavin 的]]>
    </summary>
    
      <category term="建博客" scheme="http://yoursite.com/tags/%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="建博客" scheme="http://yoursite.com/categories/%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>